name: Deploy on KakaoCloud

on:
  push:
    branches:
      - release/0.0.1
jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. Java 및 Gradle 환경 준비
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin' # Java 배포판 (예: 'temurin' 또는 'zulu')
          java-version: '17'      # Java 버전 (예: '8', '11', '17')

      # 3. application-secret.yml 생성
      - name: Decode and create application-secret.yml
        run: |
          echo "${{ secrets.KC_ENCODED_APPLICATION_SECRET_YML }}" | base64 -d > src/main/resources/application-secret.yml

      # 4. data.sql 생성
      - name: Create data.sql
        run: |
          echo "${{ secrets.DATA_SQL }}" > src/main/resources/data.sql

      # 5. 스프링 부트 애플리케이션 빌드 (Gradle 사용)
      - name: Build Spring Boot application
        run: ./gradlew clean build -Dspring.profiles.active=test

      # 6. Docker 로그인
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      # 7. Docker 이미지 빌드
      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.KC_DOCKER_IMAGE_NAME }}:latest .

      # 8. Docker 이미지 푸시
      - name: Push Docker image
        run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.KC_DOCKER_IMAGE_NAME }}:latest
          

      # 8. 카카오클라우드 VM에 SSH로 접속하여 이미지 다운로드 및 컨테이너 실행
      - name: Deploy on EC2
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.KC_VM_IP }}
          username: ${{ secrets.KC_VM_USERNAME }}
          key: ${{ secrets.KC_VM_PRIVATE_KEY }}
          script: |
            docker pull ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.KC_DOCKER_IMAGE_NAME }}:latest
            docker stop ${{ secrets.KC_DOCKER_IMAGE_NAME }} || true
            docker rm ${{ secrets.KC_DOCKER_IMAGE_NAME }} || true
            docker image prune -f
            docker run -d --name ${{ secrets.KC_DOCKER_IMAGE_NAME }} -p 8080:8080 ${{ secrets.DOCKER_HUB_USERNAME }}/${{ secrets.KC_DOCKER_IMAGE_NAME }}:latest